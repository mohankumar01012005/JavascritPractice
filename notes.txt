## Why JavaScript? How Website Work
-Brain of Website

## VARIABLES
  ==>Containers to store values 
  ==>What you can
     -->First letter must be a letter,underscore(_)
     -->can use $
     -->can use a letter, number, under score
     -->no limit to length of variable name
  ==>What you can't
     -->can't use numbers at begining of variable name 
     -->can't use js reserved words
     -->can't use spaces
  **=>variables are Case sensitive 
## DATA TYPES
  ==> 6 Primitive data types
     -->Undefined = Undefined
     -->Boolean   = true or false
     -->Number    = 9
     -->String    = "mohan"
     -->Bigint    = 
   ## NaN = not a number


   ##Expressions and operators
      5+20        {5 is oparand, = is oparator}
      Expressions=Combinations of oparand and oparator 
   #types of OPRATORS
      1.assignment  ==>    (= symbol)  {assigning a value to left operand based on value of right side oparand}
      2.arithmatic  ==>  (+,-,*,/,%, increament and decreament)    {addition , subtraction, multiplication, modulo and division} {takes numerical valueas operands and returns a single numeric value}
                        increament oparator== X++(postfix), ++X(prefix)
                        Postfix(X++):The postfix oparator increaments and returns the value after increamenting 
                        Prefix(++X):the prefix oparator increaments and returns the value before increamenting
                        Decreament oparator== X--(postfix), --X(prefix)
                        Postfix(X--):The postfix oparator decreaments and returns the value after decreamenting
                        Prefix(--X):the prefix oparator decreaments and returns the value before decreamenting
      3.comparision ==> (<,>,=,!=,>=,<=) this oparator compars the operands and returns a logical value based on the comparision is true 
      4.logical     ==> (and , or, not)logical operators are used with Boolean value and returns Boolean valueas
                        and(&&)= true if and only if all the operands are true otherwise its false
                        or(||) = true if and only if one oparand is true
                        not(!) = takes true and returns false and viseversa 
                     
      5.string      ==> teh concatenation oparator(+), concatenates two strings and returns the union of two strings
      6.Conditional(ternary)
      7.Exponentioal==> ex=3**3,   (10**-1)==1/10

## Differense between == and ===
      == will check the value are same or not and returns true or false accordingly
      === will checks the value and the type of data  same or not and returns true or false accordingly
###CONTROL STATEMENTS AND LOOPS
   ##IF.. ELSE
      ==> the if statement executes a statement if a specified Condition is true if Condition is false other statement can be executed
          if(Condition){
            
          }else{

          }

      ##// truthy and falsy values in javascript

         ==>falsy values== 0, "", Undefined, null, NaN, false**,
         ===>if there is any falsy value  in is Condition then always the else part is executed.

   ##Conditional Ternary operator 
         ==>the only oparator which takes 3 operands
         ==>variablename = (Condition)? value1:value2       {if and else's shorter version}

   ##SWITCH STATEMENT
         ==>evalutes an Expression, matching the Expression's value to a case clause, and executes statement associated with that case.
      ##BREAK STATEMENT
         ==> Terminates the current loop , switch ,  or lable statement and transfer programme control to the statement following the Terminated statement
   
   ##WHILE LOOP
         ==>the while statement creates a loop that executes a specified statement as long as the test Condition evalutes to true
                  var num = 0;
                  //Block scope
                  while(num<=10){
                  console.log(num);     // Infinite Loop
                  ++num  
                  }  


   ##DO-WHILE LOOP
        ==> We will get the ourput directly and then the Condition will be checked
        
         ==>     var num = 0;
                  do{
                  console.log(num);     // Infinite Loop
                  ++num  
                  }while(num<=10);

   ## FOR LOOP
         ==>for(initializer; Condition; iteration)
             {
               //code to be executed
             }



####FUNCTIONS IN JAVASCRIPT 
         ==>A block of code designed to perform a particular task
         ==>before we use a function we need to define it
      ==>function functionName()
             {
               //statement
             }
      ==> Defining a function does not executes it to execute we need to call it 
      ==> function is a group of re-usable code can be called anyware in code 
   
   ##Differense between function parameter and function argument
      
      ==> function total(a,b ){     // a, b are function parameters 
            var c = a+b
            console.log(c);
            }                    
            
            
            total();                  
            total(50,40);            // 50,40 are function arguments
            total(20,30);           //20,30 are function arguments

      ==> by using function parameters and function arguments  we can re-use function code easily
      ==> you can use same code many times with different arguments 

   ## FUNCTION EXPRESSION
      ==> creating a function and put it in a variable
                     
               function total(a,b ){     // a, b are function parameters 
                  var c = a+b
                   console.log(c);
                   }                    
 
 
               var funExpr = total(10,20); 
               funExpr;     //FUNCTION EXPRESSION

   ## RETURN KEYWORD
      ==>when js reaches return statement the function will stop executing
               function total(a,b ){     
                  return c = a+b;        //using return key word
                  }                    
   
   
               var funExpr = total(1,20); 
                console.log('The sum of two numbers is:'+ funExpr); 

   
   ##ANONYMOUS FUNCTION
      ==> function without any name is called anonymous function


             var funExpr = function (a,b ){     
            return c = a+b;        
             } 
            console.log(funExpr(20 ,4));                   
            console.log('The sum of two numbers is:'+ funExpr); 



###LET AND CONST AND VARIABLES
      ==> LET and CONST = block scope 
      ==> VAR = function scope
      ==> if we create any variable in a block(inside any {}) using let or const you cannot manupulate them (change their values ) out side the block.
      ==> if you create any variable using let or const in global scope (parent block) you can manupulate in child block but viseversa is not possible
      ==> var can be manupulated in any way


###FAT ARROW FUNCTION
      const sum = () => {
         let a = 10; b=20; 
         return `the sum of two numbers is  ${a+b}`;
         }

      console.log(sum());


      ##SIMPLIFIED VERSION 

      const sum = () => {
         let a = 10; b=20; 
       return `the sum of two numbers is  ${a+b}`;
        }
      console.log(sum());

      ##SIMPLIFIED VERSION 

      const sum = () => {
         let a = 10; b=20; 
  
       return `the sum of two numbers is  ${(a=3)+(b=5)}`;
         }
      console.log(sum());


      //##SIMPLEST VERSION

         const sum = () => `the sum of two numbers is  ${(a=3)+(b=5)}`;
         console.log(sum());



####ARRAYS IN JAVASCRIPT
      ==> if we want to store multiple values in a variable we use ARRAYS
      ==> in js we have an array class and arrays are the prototypes of the class
      ==> the values in arrays are located within square brackets[] 
      ==> unlike other programming languages arrays can store multiple data types in same array
         -->let king=['lion', 'cheeta', 'panda', 'lepord', 3,4, true]
         --> here first element (lion) is called lower index/ lower  boundary
         --> and last element (true) is called upper / upper boundary
         --> index number is used to manupulate indevidual  elements in an array  
         -->  index number of first number is 0 (zero) and goes on by adding 1 to consecutive elements

   ## TRAVERSAL IN AN  ARRAY
      -> Navigates through an array if you want to get a single data in an array and change that change that value

         let king=['lion', 'cheeta', 'panda', 'lepord']
         console.log(king[2]);

   //## LENGTH OF ARRAY       

         let king=['lion', 'cheeta', 'panda', 'lepord']
         console.log(king.length);        //USED to find the last value of an array

### FOR LOOP

         let king=['lion', 'cheeta', 'panda', 'lepord']
         for (var i=0; i<king.length;i++){
            console.log(king[i]);
         }

   ##FOR IN LOOP 
      ==> for in loop will give the index number of  a given array

      let king=['lion', 'cheeta', 'panda', 'lepord']
      for (Elements in king){
         console.log(Elements);
      }

   ##FOR OF LOOP
      ==> Works like for loop but syntex is different

          let king=['lion', 'cheeta', 'panda', 'lepord']
         for (Elements of king ){
             console.log(Elements);
            }
         
   ##FOR EACH LOOP
      ==> calls a function for each element in the array 
      ==> in for in and for of loops we can can get either index number or element but in FOR EACH loop we can get all the    details like index number, element and also array name 
      ==> in for each loop you cant use break statement
       
       let king=['lion', 'cheeta', 'panda', 'lepord']
       king.forEach(function(Element,index,array){
         console.log(Element);
       });

### SEARCHING AND FILTER IN ARRAY

   ===> Index of method 
         ->indexOf method is used to find a particular elements index value 
         -> returns the first(least) index of an element within the array equal to an element
         -> returns -1 if none is found
         -> strarts the searching from 0th index number.
         -> its a case sensitive
         -> if the array is too big and you want to find the index value of similar elements there this indexOf method is used 
            to find the index value of same elements towards right side.

             let king=['lion', 'cheeta', 'panda', 'lepord']
               console.log(king.indexOf("cheeta"));
                              (and/or)
             let king=['panda', 'cheeta', 'lion', 'lepord','lion']
                console.log(king.indexOf("lion",3));     //("lion",3)--> lion is the element we are searching for and three denotes we are searching in right direction

      ===>## LAST INDEX OF METHOD

         > returns the last(Greatest) index of an element within the array equal to an element
         -> returns -1 if none is found
         -> strarts the searching for elements from last to first
         -> its a case sensitive 
         -> this also gives the value of index of particular elements and if there are multiple elements it will give you the greatest index value
         -> if the array is too big and you want to find the index value of similar elements there this lastIndexOf method is used 
            to find the index value of same elements towards left side.

               
            
               let king=['panda', 'cheeta', 'lion', 'lepord','lion']
                  console.log(king.lastIndexOf("lion",3));  


       ### INCLUDES()

         -> determines wether the array contains the value , na d returns true or false appropriately
         -> its a case sensitive
         -> it will find elements through forward search 
              
               let king=['panda', 'cheeta', 'lion', 'lepord','lion']
                  console.log(king.includes("lion"));   
       

                    let king=['panda', 'cheeta', 'lion', 'lepord','lion']
                      console.log(king.includes("panda",2));                // false becauese its starting search from index 2    


       ###  FIND ()         

         -> returns the found element in the array, if some element in the array satisfies the testing Condition.
         -> returns Undefined if not found and only problem is that it returns only one elemenet

               
               var prices = [200,300,350,380,400,450,600];
               //aim is to find all the price<400
                  const findElem = prices.find((currval)=>{
                  return currval<400;
                });
               console.log(findElem);          //will give you only one value that satisfies the return condition first

                   
                   //##SIMLPIFIED WAY
                   
               var prices = [200,300,350,380,400,450,600];
                   console.log(prices.find((currval)=> currval<400) );


      ## FIND INDEX ()

         -> almost same as find() method but here it is returns the index value and returns -1 if elemenet is not found
         -> returns -1 if not found 
           var prices = [200,300,350,380,400,450,600];
            console.log(prices.findIndex((currval)=> currval<400) );


   ### FILTER METHOD()

      -> returns new array containing all elements of the calling array for which the provided filtering function returns true
      -> returns empty array[] if not found
        var prices = [200,300,350,380,400,450,600];
             //condition prices<400
         const newPrice=prices.filter((Element, index)=>{
            return Element<400;
          })
            console.log(newPrice);

   #### HOW TO SORT() AN ARRAY METHOD 
      ## array.sort() method 

      -> this method sorts the elements of array and  returns the sorted array , the default sort order is asscending , 
          built upon converting them into strings
      -> in this method numbers are converted in to strings so, 25>100 because 2>1.

      
         var months = ["jan", "feb", "march", "april", "july", "dec"]
            console.log(months.sort());

         var num = [2, 3, 10, 1000, 49, 58, 300];
            console.log(num.sort());


#### perform CRUD (create, read, update, and delete )

   ##array.prototype.push()

      ==> the push() method  adds one or more elements to the end of an array and returns the new lenth of the array

             var frds=['pen', 'book', 'pencil', 'mouse']
             const count= frds.push('keyboard','laptop','bag');  //const count is for returning new length of the array
               console.log(frds);
               console.log(count);
    
   
   ##array.prototype.unshift()

      ==> the unshift() method  adds one or more elements to the start/begining of an array and returns the new lenth of the array

            var frds=['pen', 'book', 'pencil', 'mouse']
            const count= frds.unshift('keyboard','laptop','bag');  //const count is for returning new length of the array
            console.log(frds);
            console.log(count);

   
   ##array.prototype.pop()

      ==> the pop() method removes the last elemenet from the array and returns that elemenet
      ==> this method ahanges length of the array

           var frds=['pen', 'book', 'pencil', 'mouse']
            console.log(frds);
            console.log(frds.pop());
            console.log(frds);

      
   ##array.prototype.shift()
     
     ==> the shift() method removes the first elemenet from the array and returns that removed elemenet
     ==> this method ahsnges the length of the array

         var frds=['pen', 'book', 'pencil', 'mouse']
          console.log(frds);
          console.log(frds.shift());
          console.log(frds);


#### SPLICE() METHOD   

     ==> splice() function removes or adds elements in a  array

   // GENERAL FORMATE == const newMonth = months.splice((index that you want to insert/delete the new elemenet), (no. of elements we want to delete after deleting index ), ("the element that you want to insert in the array"))

   const months=['Jan', 'march', 'April', 'June', 'July'];
   const newMonth = months.splice(months.length,0,'Dec');   // months.length ==> means after the last most element of the array
      console.log(months);

//deleting-> month.splice(2,3)==> it will delete 3 elements after 2nd index element  
//adding-> month.splice(2,3,"book")==> it will  add book in the array at 2nd index and deletes the three elements after that 



// the return value of splice method 

   console.log(newMonth);   // splice method is mostly used for deleting the eelments in  return value it will give the deleted values

//## UPDATING

   const months=['Jan', 'march', 'April', 'June', 'July'];
   const newMonth = months.splice(1,1,'March')
   console.log(months);

//### ORIGINAL METHOD FOR UPDATING AN ARRAY 

   const months=['Jan', 'march', 'April', 'June', 'July'];
   const indexOfMonth = months.indexOf('march');   /// finding index of elements in array using filter (indexof) method
   if (indexOfMonth!=-1){
      const updateMonths = months.splice(indexOfMonth,1,'March')
      console.log(months);
   }else{
      console.log('no data found');
   }


//## deleting an unknown index number element from array


   const months=['Jan', 'march', 'April', 'June', 'July'];
   const indexOfMonth = months.indexOf('June');   /// finding index of elements in array using filter (indexof) method
   if (indexOfMonth!=-1){
      const updateMonths = months.splice(indexOfMonth,1)    /// same as updating but removed the element adding part and if you 
                                                               use Infinity instead of 1 it will delete all elements after June
      console.log(months);
      console.log(updateMonths);            // returns the deleted elements from the array
   }else{
      console.log('no data found');
   }



///#### MAP AND REDUCE METHOD

   ##array.prototype.map()

      ==> returns a new array containing the results of calling a function on every element in the array
      ==> It returns new array without mutating the original array
      ==> almost same like for each method but in for each it will mutate the original array

     SYNTEX ==> let newArr = arr.map(callback(currentvalue[, index[, array]]){
                     // return elemenet for newArray after executing something
                   }[, thisArg]);

      EXAMPLE:
            const array1 = [1,3,4,5,6,];
             let newArr = array1.map((currElement,index,arr)=>{
               return `index no = ${index} and the element value is ${currElement} of the array ${arr}`
             })
              console.log(array1);
               console.log(newArr);


   // ### DIFFERENECE BETWEEN FOR EACH METHOD AND MAP METHOD 
         
         1. Returnig
            ==> both do the same job but first Differense is the returning value the for each method returns Undefined while  
                the map method returns new array with transformed elements
         
         2. Ability to chain other methods 
            ==> map is chainable means you can attach reduce(), sort(), filter(), and so on after perforing a map method over an
                array and you cant do all this in for each method becauese it returns undefined


   //## CHALLENGE - 11

      //## finding sqare root of every element in array
         
         // let arr = [ 25, 36, 49, 64, 81];
         // let arrSqr = arr.map((currElement)=>{
         //   return Math.sqrt(currElement)
         // })
         // console.log(arrSqr);

      //## multiply each element with 2 and return the elemrnts which are greater than 10

         let arr = [5,6,7,8,9];
         let arr2 = arr.map((currElement)=>{
            return currElement*2;
         }).filter((customElements)=>{         //using chaining (a method inside a method(filter))
            return customElements>10;
         })
         console.log(arr2);

   
   //### REDUCE METHOD

      ==> flatten an array means to convert 3rd or 2nd aray in to a single dimentional array
      ==> the reduce() method executes a reducer function (that we provide ) on each elelment of the array , resulting in 
          single output value
      ==> reduce function takes four arguments : 1. Accumulator
                                                 2. current value 
                                                 3. current index
                                                 4. source array
      ==> Mainly we use reduce function to find total sum, average, product, percentage (single values)

      //## finding sum

         let arr = [2,4,6]
         let sum = arr.reduce((accumulator,currElement,index,arr)=>{
            return accumulator += currElement
         },7)                                   // we can include or initialise a value to the array like this in reduce function
         console.log(sum);
       
      //## finding product

         let arr = [2,4,6]
         let sum = arr.reduce((accumulator,currElement,index,arr)=>{
            return accumulator *= currElement
         })
         console.log(sum);


   //### USING MAP, FILTER AND REDUCE FUNCTIONS SAME TIME ***************** IMPORTANT ***************

         let arr =  [2, 4, 5, 3, 9, 8 ]
         let arr2 = arr.map((customElements)=>customElements*2).filter((currElement)=>currElement>4).reduce((accumulator,currElement)=>{
         return accumulator += currElement
         })
         console.log(arr2);


   //## How to flatten an array

      ==> converting 2d and 3d array into a one dimentional array

       let arr = [
         ['zone1','zone2'],
         ['zone3','zone4'],
         ['zone5','zone6'],
         ['zone7','zone8']
      ]
      let fltArr = arr.reduce((accumulator,currentElements)=>{
         return accumulator.concat(currentElements);
      })
            console.log(fltArr);


//##### STRINGS IN JAVASCRIPT

      ==> Java script strings is zero or more characters written inside quotes.
      ==> Java script strings is used for storing and manupulating text you can use single or double quotes 
      ==> strings can be created as Primitive from string literals, or as objects, using the string constructor

   ## length of the string 

       let myname = "mohan kumar"
         console.log(myname.length);

   ## Escape charecter
      
      let myname = "mohan kumjcvhfeiuvhwofhwdfoimf\"hcbuhwgfuwegfdwe\"ar"   // use alternate quotes  or back slash \ \
         console.log(myname);

   ##Finding a string inside a string
        
        ##indexof()
            let myData = 'I am Mohan kumar here'
               console.log(myData.indexOf('here',9));
            
               // NOTE :1--> Space also counted and space has index
                        2--> here 9 means the function searches for the same elelment after index 9
                        3--> it returns -1 if not found and it is case sensitive

        ##lastIndexOf()
               //NOTE : 1--> it returns -1 if not found and it is case sensitive
                        2--> unlike in indexof() searching towards right it searches towards left from the 
                             index number given 

            let myData = 'I am Mohan kumar here'
               console.log(myData.lastIndexOf('a',5));


   ## Searching for a string in a string

         ## search()

            --> the search() method searches a string for a specified value and returns the position of the 
                match

            --> it returns -1 if not found and it is case sensitive
            --> the search method cannot take second strat position argument              
            
               const searchVar = 'the lion king'
               let edited = searchVar.search("lion")
                  console.log(edited);    


   ##Extracting string parts  {there are 3 methods or ways }

      ## 1.SLICE() method

         => slice() method extracts a part of string and returns that psrt in new string.
         => this method takes two parameters: strat position and the end position (end position is not included)
         => negative argument means the counting is starting from last

               var string = "apple, banana, orange, gua, kiwi";
               var result = string.slice(0,4)      // end argument (4) is not included
               console.log(result);

      ## 2.substring() method

         => substring method is similar to slice() Differense is it wont take negative index values if you give negative values it 
            will strart counting from 0
      
      ## 3.substr() method 
         
         => similar to slice() method the Differense is that the second parameter specifies the length of the extracted part.
         => it is more helpful in such cases where you want to extract words in string from the last simply use single negative values

               
            var fruits = "apple, banana, orange, gua, kiwi";
            var updated = fruits.substr(-10)
      

      ## Replacing String content

         ##replace()

            => replaces a specific value wiyh another value in string
            => the replace method does not change the string that is called on, it returns a new string
            => by default the replace method replaces the first match
            => replace method is case sensitive

               var bioData = 'i am mohan kumar'
               var replecaData = bioData.replace('mohan','king')
                  console.log(replecaData);

   
   ### Extracting string characters {there are 3 methods for  Extracting string character }

      ## The charAt() Method 

         =>returns the character at a specified index (position) in a string

                var myData = "mohankumar the kalvian"
                   console.log(myData.charAt(5));

         
       ## The charCodeAt() Method 

         => the charCodeAt method returns the unicode of the character at a specified index at a string. The method returns a UTF-16
            code(an integer between 0 and 65535)
         => The unicode standard provides a unique number for every charecter, no matter the platform, device, application, or languages
            UTF-8 is a popular unicode encoding which has 88-bit code units.

               var myData = "mohankumar the kalvian"
                console.log(myData.charCodeAt(0))

      ## property access
         
         => allows property acccss []

             let str = "HELLO WORLD"
               console.log( str[2]);

### to upper case and to lower case  method 
      
        let names = "Mohan The King"
      console.log(names.toLocaleLowerCase());
      console.log(names.toLocaleUpperCase());

### Concat() method 

      => concat() joins two or more strings

         var firstName = "mohan"
         var lastName = "kumar"
         console.log(firstName.concat(lastName));
         console.log(firstName.concat(" ",lastName));
         console.log(firstName+ " "+lastName);
         console.log(`${firstName} ${lastName}`);

## string.trim() method

   => the trim method removes white space from both sides of string
   => this function removes emty space at the starting of string

         var names = "         mohan "
         console.log(names.trim());


## Converting a string to an array

   ## Spli() method 

       var txt = "a,d,e,h,v,f,"          //string
       console.log(txt.split(","));      //split on comas
      console.log(txt.split(""));       // split on spaces
      console.log(txt.split("|"));      // spli on pipe


### Date and Time Methods

      ==> javascript date objects represent a single moment in time in a platform-independent formate. Date objects contain a number that represents
          milliseconds since 1 january 1970 UTC.

   ## Creating date objects 
      ## there are 4 ways to crate a date object:


   
 